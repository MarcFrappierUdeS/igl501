include "biblio.csp"
-- Property 1 : A book can always be acquired by the library when it is not currently acquired.

Prop1v0 = (|||b:BOOKID @ Prop1v0Body(b)) ||| CHAOS({|join,leave|})
Prop1v0Body(b) =
    acquire!b ->
    discard!b ->
    Prop1v0Body(b)

-- Can't check this property when both associations (loans and reservations) are active.
-- Hiding and loops in one association make all states unstable in the other association,
-- thus weakening the property to check under stable-failure refinement.
-- Must check it in two parts:

-- Part 1 - disable reservations, by synchronizing with STOP on reservation actions
assert Prop1v0  [F= (MAIN [| RESERVSET |] STOP) \ BOOKMEMBERASSOC

-- Part 2 - disable loans, by synchronizing with STOP on loan actions
assert Prop1v0  [F= (MAIN [| LOANSET |] STOP) \ BOOKMEMBERASSOC

-- Property 2. A book cannot be acquired by the library if it is already acquired.

Prop2v0 = |||b:BOOKID @ Prop2v0Body(b)
Prop2v0Body(b) =
    acquire!b ->
    discard!b ->
    Prop2v0Body(b)

assert Prop2v0  [T= (MAIN \ {| join,leave,lend,renew,return,reserve,take,cancel |})


-- Property 3
-- An acquired book can be discarded only if it is neither lent nor reserved.
-- Check property in two parts
-- Part 0 - Check for loans

Prop3P0 = |||b:BOOKID @ Prop3P0Body(b)
Prop3P0Body(b) =
    acquire!b ->
    Prop3P0Loop(b);
    discard!b ->
    Prop3P0Body(b)
Prop3P0Loop(b) =
    [] m : MEMBERID @ 
      (
        (lend!m!b -> return!b -> Prop3P0Loop(b))
      []
        (take!m!b -> return!b -> Prop3P0Loop(b))
      )
  []
    SKIP

assert Prop3P0  [T= MAIN \ {| reserve,renew,cancel,join,leave |}

-- Part 1 - Check for reservations

Prop3P1 = |||b:BOOKID @ Prop3P1Body(b)
Prop3P1Body(b) =
    acquire!b ->
    (||| m : MEMBERID @ RESERVATION(m,b));
    discard!b ->
    Prop3P1Body(b)

assert Prop3P1  [T= MAIN \ {| lend,renew,return,join,leave |}

-- Property 4! A person must be a member of the library in order to borrow a book.

Prop4 = |||m:MEMBERID @ Prop4Body(m)
Prop4Body(m) =
    join!m ->
    Prop4Loop(m);
    leave!m ->
    Prop4Body(m)
Prop4Loop(m) =
    ([] b : BOOKID @ (lend!m!b -> Prop4Loop(m)) [] (take!m!b -> Prop4Loop(m)))
  []
    SKIP

assert Prop4  [T= MAIN \ {| renew,return,reserve,cancel,acquire,discard |}

-- Property 5. A book can be reserved only if it has been borrowed or already reserved by
-- another member.
-- Property 6. A book cannot be reserved by the member who is borrowing it.
-- Property 8. 8. A book cannot be lent to a member if it is reserved.
-- Property 9. A member cannot renew a loan if the book is reserved.
-- Property 10. A member is allowed to take a reserved book only if he owns the oldest reservation.
-- Property 11. A book can be taken only if it is not borrowed.
-- All these properties are checked using the same process expression, since
-- they require to express loand and reservation management

Prop5_6_8_9_10_11v0 = (|||b:BOOKID @ Prop5_6_8_9_10_11v0Body(b,<>,nullmid))
Prop5_6_8_9_10_11v0Body(b,l,cb) =
        ([] m:MEMBERID @    cb != m
                          and
                            (
                              cb != nullmid
                            or
                              l != <>
                            )
                          and not elem(m,l)
                                                  & reserve!m!b -> Prop5_6_8_9_10_11v0Body(b,l^<m>,cb))        -- property 5 & 6
    []  ([] m:MEMBERID @ l != <> and m == head(l) and cb == nullmid
                                                  & take!m!b -> Prop5_6_8_9_10_11v0Body(b,tail(l),m))          -- property 10 & 11
    []  ([] m:MEMBERID @ elem(m,l)                & cancel!m!b -> Prop5_6_8_9_10_11v0Body(b,removex(l,m),cb))
    []  (                l == <>                  & lend?m!b -> Prop5_6_8_9_10_11v0Body(b,l,m))                -- property 8
    []  (                l == <>                  & renew!b -> Prop5_6_8_9_10_11v0Body(b,l,cb))                 -- property 9
    []  (                cb != nullmid            & return!b -> Prop5_6_8_9_10_11v0Body(b,l,nullmid))

assert Prop5_6_8_9_10_11v0  [T= MAIN \ {| acquire,discard,renew,join,leave |}

-- Property 7. A book cannot be reserved by a member who is reserving it.

Prop7v0 = (|||b:BOOKID @ |||m:MEMBERID @ Prop7v0Body(b,m))
Prop7v0Body(b,m) =
    reserve!m!b ->
    (
        take!m!b -> Prop7v0Body(b,m)
    []
        cancel!m!b -> Prop7v0Body(b,m)
    )

assert Prop7v0  [T= MAIN \ {| acquire,discard,lend,renew,return,join,leave |}

-- Property 12! Anyone who has reserved a book can cancel the reservation at anytime before he takes it.

Prop12 = (|||b:BOOKID @ (|||m:MEMBERID @ Prop12Body(b,m)) |[ {| reserve,take,cancel |} ]| Prop12ResList(b,<>))
Prop12Body(b,m) =
    reserve!m!b ->
    (
        take!m!b -> Prop12Body(b,m)
    []
        cancel!m!b -> Prop12Body(b,m)
    )

Prop12ResList(b,l) =
      ([] m:MEMBERID @ not elem(m,l)            & reserve!m!b -> Prop12ResList(b,l^<m>))
  []  ([] m:MEMBERID @ l != <> and m == head(l) & take!m!b -> Prop12ResList(b,tail(l)))
  []  ([] m:MEMBERID @ elem(m,l)                & cancel!m!b -> Prop12ResList(b,removex(l,m)))

assert Prop12  [F= MAIN \ {| join,leave,acquire,discard,lend,renew,return |}

-- Property 13! A member can relinquish library membership only when all his loans have been
-- returned and all his reservations have either been used or canceled.

Prop13 = |||m:MEMBERID @ Prop13Body(m)
Prop13Body(m) =
    join!m ->
    (|||b:BOOKID @ Prop13Loop(m,b));
    leave!m ->
    Prop13Body(m)
Prop13Loop(m,b) =
      (lend!m!b -> return!b -> Prop13Loop(m,b))
  []  
      (
        reserve!m!b ->
          (
            (take!m!b -> return!b -> Prop13Loop(m,b))
          []
            (cancel!m!b -> Prop13Loop(m,b))
          )
      )
  []
      SKIP

assert Prop13  [T= MAIN \ {| acquire, discard, renew |}

-- Property 14! Ultimately, there is always a procedure that enables a member to leave the library.

Prop14 = (|||m:MEMBERID @ Prop14Body(m)) ||| CHAOS({| acquire, discard |})
Prop14Body(m) =
    join!m ->
    leave!m ->
    Prop14Body(m)

assert Prop14  [F= (MAIN [| RESERVSET |] STOP) \ BOOKMEMBERASSOC
assert Prop14  [F= (MAIN [| LOANSET |] STOP) \ BOOKMEMBERASSOC

-- Property 15. A member cannot borrow more than the loan limit defined at the system level for all users.

Prop15 = |||m:MEMBERID @ Prop15Body(m,{})

Prop15Body(m,s) =
        ([] b:BOOKID @ card(s) < maxNbLoans and not member(b,s)     & lend!m!b -> Prop15Body(m,union(s,{b})) )
    []  ([] b:BOOKID @ card(s) < maxNbLoans and not member(b,s)     & take!m!b -> Prop15Body(m,union(s,{b})) )
    []  ([] b:BOOKID @ member(b,s) & return!b -> Prop15Body(m,diff(s,{b})) )

assert Prop15  [T= MAIN \ {| join,leave,acquire,discard,reserve,cancel,renew |}
